{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 312 1252    0  108]\n",
      " [ 624 3748  628    0]\n",
      " [   0 3328    0    0]]\n"
     ]
    }
   ],
   "source": [
    "#Importing numpy\n",
    "import numpy as np\n",
    "import copy\n",
    "import pprint as pp\n",
    "import matplotlib.pyplot as plt\n",
    "from itertools import chain\n",
    "import math\n",
    "\n",
    "#The first NUM adinkras will be used in the following calculations (NUM^2 gadget values) \n",
    "NUM = 100\n",
    "\n",
    "#initialization of the lists which will hold adinkras\n",
    "AdinkraA = []\n",
    "AdinkraB = []\n",
    "\n",
    "#j will be the position of Adinkra A, and k will be the position of Adinkra B \n",
    "j = 0\n",
    "k = 0\n",
    "\n",
    "#initialization of histogram varibles\n",
    "oneminusthird = 0\n",
    "onezero = 0\n",
    "onethird = 0\n",
    "oneone = 0\n",
    "thirdminusthird = 0\n",
    "thirdzero = 0\n",
    "thirdthird = 0\n",
    "thirdone = 0\n",
    "zerominusthird = 0\n",
    "zerozero = 0\n",
    "zerothird = 0\n",
    "zeroone = 0\n",
    "\n",
    "#the tolerance for binning\n",
    "b = 0.001\n",
    "\n",
    "#loading the .txt file with all of the L matrices for 96 of the 36,864 adinkras\n",
    "dt = np.dtype('i8') \n",
    "file = np.loadtxt(\"Anaconda3/Untitled Folder/adinkra_dict_yangrui.txt\", dtype=dt)\n",
    "\n",
    "#A function which takes the set of 1x4 numpy arrays of the text file and compiles them into a numpy 4x4 array\n",
    "def gLMat(line1, line2, line3, line4):\n",
    "    matrix = np.array([line1, line2, line3, line4])\n",
    "    return matrix\n",
    "\n",
    "#The graph gadget\n",
    "def GraphGadg(AdinkraA, AdinkraB):\n",
    "    t = 0\n",
    "    for w in range(4):\n",
    "            for x in range(w + 1, 4):\n",
    "                \n",
    "                left = np.matmul(np.abs(np.transpose(AdinkraA[w])),np.abs(AdinkraA[x]))\n",
    "                right = np.matmul(np.abs(np.transpose(AdinkraB[w])),np.abs(AdinkraB[x]))\n",
    "                t += np.matrix.trace(np.matmul(left,right))\n",
    "                \n",
    "    gadg = (1/24)*t\n",
    "    return gadg\n",
    "\n",
    "#The regular gadget\n",
    "def RegGadg(AdinkraA, AdinkraB):\n",
    "    t = 0 \n",
    "    for w in range(4):\n",
    "            for x in range(w + 1, 4):\n",
    "                \n",
    "                VtA = (np.matmul(np.transpose(AdinkraA[w]),AdinkraA[x]) - np.matmul(np.transpose(AdinkraA[x]),AdinkraA[w]))\n",
    "                VtB = (np.matmul(np.transpose(AdinkraB[w]),AdinkraB[x]) - np.matmul(np.transpose(AdinkraB[x]),AdinkraB[w]))\n",
    "                t += np.matrix.trace(np.matmul(VtA,VtB))\n",
    "                \n",
    "    gadg = (-1/96)*t\n",
    "    return gadg\n",
    "\n",
    "#the master loop\n",
    "for y in range(0, NUM):\n",
    "    AdinkraA = [] \n",
    "    for x in range(0, 4):\n",
    "        j = x * 4 + y * 16\n",
    "        AdinkraA.append(np.transpose(gLMat(file[j], file[j + 1], file[j + 2], file[j + 3]))) #fills AdinkraA with the xth L matrix from the yth adinkra\n",
    "    for z in range(0, NUM):\n",
    "        AdinkraB = []\n",
    "        for x in range(0, 4):\n",
    "            k = x * 4 + z * 16\n",
    "            AdinkraB.append(np.transpose(gLMat(file[k], file[k + 1], file[k + 2], file[k + 3]))) #fills AdinkraB with the xth L matrix from the zth adinkra\n",
    "        #now that we have two complete adinkras, we calculate both gadget values \n",
    "        R = RegGadg(AdinkraA, AdinkraB)\n",
    "        G = GraphGadg(AdinkraA, AdinkraB)\n",
    "        #manual binning\n",
    "        if math.isclose(G, 1, rel_tol=b) and math.isclose(R, -0.3333333333333333, rel_tol=b):\n",
    "            oneminusthird += 1\n",
    "        elif math.isclose(G, 1, rel_tol=b) and math.isclose(R, 0, rel_tol=b):\n",
    "            onezero += 1\n",
    "        elif math.isclose(G, 1, rel_tol=b) and math.isclose(R, 0.3333333333333333, rel_tol=b):\n",
    "            onethird += 1\n",
    "        elif math.isclose(G, 1, rel_tol=b) and math.isclose(R, 1, rel_tol=b):\n",
    "            oneone += 1\n",
    "        elif math.isclose(G, 0.3333333333333333, rel_tol=b) and math.isclose(R, -0.3333333333333333, rel_tol=b):\n",
    "            thirdminusthird += 1\n",
    "        elif math.isclose(G, 0.3333333333333333, rel_tol=b) and math.isclose(R, 0, rel_tol=b):\n",
    "            thirdzero += 1\n",
    "        elif math.isclose(G, 0.3333333333333333, rel_tol=b) and math.isclose(R, 0.3333333333333333, rel_tol=b):\n",
    "            thirdthird += 1\n",
    "        elif math.isclose(G, 0.3333333333333333, rel_tol=b) and math.isclose(R, 1, rel_tol=b):\n",
    "            thirdone += 1\n",
    "        elif math.isclose(G, 0, rel_tol=b) and math.isclose(R, -0.3333333333333333, rel_tol=b):\n",
    "            zerominusthird += 1\n",
    "        elif math.isclose(G, 0, rel_tol=b) and math.isclose(R, 0, rel_tol=b):\n",
    "            zerozero += 1\n",
    "        elif math.isclose(G, 0, rel_tol=b) and math.isclose(R, 0.3333333333333333, rel_tol=b):\n",
    "            zerothird += 1\n",
    "        elif math.isclose(G, 0, rel_tol=b) and math.isclose(R, 1, rel_tol=b):\n",
    "            zeroone += 1\n",
    "        else:\n",
    "            print(\"uh oh! something has gone wrong. The gadget is not supposed to return this value\")\n",
    "            print(G)\n",
    "            print(R)\n",
    "\n",
    "results = np.array([[oneminusthird, onezero, onethird, oneone],[thirdminusthird, thirdzero, thirdthird, thirdone],[zerominusthird, zerozero, zerothird, zeroone]])\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
